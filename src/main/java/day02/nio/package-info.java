package day02.nio;

/*
NIO是分布式技术的基础

 BIO和NIO对比
 BIO
 1.阻塞通信模型，典型代表ServerSocket和Socket的accept,connect,read,write
 会产生阻塞。
 所以BIO通信模型的弊端在于：如果有大量请求，会创建大量线程，一可能
 造成内存溢出，此外，线程多了以后，就会造成负载过高·，因为要做线程管理和上下文切换
 虽然引入线程池，也未能解决根本问题，因为底层还是同步阻塞模型。
 同步阻塞模型一是性能低，二是不可靠，取决于对端环境
 2.面向流处理，即阻塞最根本的与原因在于流的read和write是阻塞方法

 NIO
 1.非阻塞通信模型
 2.面向缓冲区Buffer
 3.NIO传输数据的方式：把数据放到缓冲区，通过通道进行数据传输

 NIO Selector
 Selector 一般称 为选择器 ，当然你也可以翻译为 多路复用器 。
 它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel
 （通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接。
 最开始的Selector在做线程唤醒时，当某一个客户端有事件发生时，会唤醒
 所有线程，这种机制会引起惊群现象，这是不好的线程，因为所有线程都唤醒
 但只有一个线程处理，资源浪费。
 NIO的适用场景，适用于大量的短请求场景，比如浏览网页，浏览商品等

 底层全双工通信
 */
